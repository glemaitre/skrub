name: 'build'

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - '*'
  # schedule:
  #   - cron: "30 2 * * *"
  #     branches:
  #       - "main"

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest, macos-12]
        environment: [
            ci-py310-min-deps, ci-py311-min-deps,
            ci-py310-min-optional-deps,
            ci-py310-latest-deps, ci-py311-latest-deps, ci-py312-latest-deps,
            ci-py312-latest-optional-deps
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.23.0
          environments: ${{ matrix.environment }}
          # we can freeze the environment and manually bump the dependencies to the
          # latest version time to time.
          frozen: true

      - name: Run tests
        run: pixi run -e ${{ matrix.environment }} test -n 3

      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v4.4.1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     slug: scikit-learn-contrib/project-template

  # run_nightly:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     run: ${{ github.event_name == 'schedule' || contains(steps.get_head_commit_message.outputs.COMMIT_MSG, '[deps nightly]') }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - id: get_head_commit_message
  #       name: get head commit message
  #       run: echo "COMMIT_MSG=$(git show -s --format=%s)" >> "$GITHUB_OUTPUT"

  # nightly:
  #   needs: run_nightly
  #   if: ${{ needs.run_nightly.outputs.run == 'true' }}
  #   runs-on: ubuntu-latest
  #   name: test against nighlty dependencies
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #           python-version: "3.11"
  #       name: 'Setup python'
  #     - shell: bash {0}
  #       run: ./build_tools/github/install.sh
  #       name: 'Install skrub'
  #       env:
  #         INSTALL_NIGHTLY: "true"
  #         DEPS_VERSION: "dev"
  #     - shell: bash {0}
  #       run: ./build_tools/github/test.sh
  #       name: 'Run tests'
